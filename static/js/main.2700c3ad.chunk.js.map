{"version":3,"sources":["components/NavBar.js","pages/Home.js","pages/DataSearch.js","components/SimpleCard.js","pages/DataListView.js","pages/MapView.js","pages/App.js","theme.js","serviceWorkerRegistration.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","icon","marginRight","spacing","title","renderNavLink","buttonLabel","pathname","render","history","Button","color","onClick","push","NavBar","classes","Fragment","CssBaseline","AppBar","position","Toolbar","className","Typography","variant","heroContent","backgroundColor","palette","background","paper","padding","heroButtons","marginTop","Home","Container","maxWidth","component","align","gutterBottom","paragraph","Grid","container","justify","item","dotenv","config","display","marginLeft","DataSearch","React","useState","loading","setLoading","fetchDataAndRedirect","isManualSearch","zipCodeByLocation","a","zipcode","document","getElementById","value","parseInt","axios","get","response","state","data","parseZipCode","results","forEach","locationInfo","address_components","types","includes","console","log","short_name","showCurrentPosition","coords","latitude","longitude","process","zipCode","getLocation","navigator","geolocation","getCurrentPosition","alert","TextField","id","label","type","InputLabelProps","shrink","placeholder","endIcon","CircularProgress","minWidth","bullet","margin","transform","fontSize","pos","marginBottom","SimpleCard","props","Card","CardContent","risk","businessName","address","city","zip","CardActions","size","locationDetails","JSON","stringify","handleViewMap","location","width","displayCards","map","inspection","aka_name","displayError","Alert","severity","DataListView","undefined","mapStyles","height","GoogleApiWrapper","apiKey","google","zoom","style","initialCenter","lat","lng","App","exact","path","MapViewComponent","createMuiTheme","primary","main","secondary","error","red","A400","default","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","ThemeProvider","querySelector","URL","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.2700c3ad.chunk.js","sourcesContent":["import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Button from '@material-ui/core/Button';\nimport { Route } from 'react-router-dom'\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  }\n}));\n\nfunction renderNavLink(buttonLabel, pathname){\n  return(\n    <Route render={({history}) => (                      \n      <Button color=\"inherit\" onClick={() => { history.push(pathname) }}>{buttonLabel}</Button>\n    )} />  \n  );\n}\n\nexport default function NavBar() {\n  \n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n\n      <AppBar position=\"relative\">\n        <Toolbar>\n          <LocalHospitalIcon className={classes.icon} />\n          <Typography variant=\"h6\" color=\"inherit\" className={classes.title}>\n            Healthy Chicago\n          </Typography>\n\n          { renderNavLink('Home', '/') }\n          { renderNavLink('Search', '/search') }\n          { renderNavLink('Data View', '/view-data') }\n          { renderNavLink('Map View', '/map-view') }\n\n        </Toolbar>\n      </AppBar>      \n    </React.Fragment>\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport NavBar from '../components/NavBar'\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport { Route } from 'react-router-dom'\n\n\nconst useStyles = makeStyles((theme) => ({\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  heroButtons: {\n    marginTop: theme.spacing(4),\n  },\n}));\n\n\nexport default function Home() {\n  const classes = useStyles();\n  return (\n    <div>\n        <NavBar/>\n        \n        <div className={classes.heroContent}>\n          <Container maxWidth=\"sm\">\n            <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\n              Eat Clean, Fresh, Well Prepared Food\n            </Typography>\n            <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\n              Search and view food inspection data from Chicago. This app provides you data\n              to keep you safe. According to the CDC, there are many people \n              that get sick from food poisoning leading to hospitalization or possibly death. \n            </Typography>\n            \n            <div className={classes.heroButtons}>\n              <Grid container spacing={2} justify=\"center\">\n                <Grid item>\n                  <Route render={({history}) => (                      \n                    <Button variant=\"contained\" color=\"primary\" onClick={() => { history.push('/search') }} >\n                      Start Exploring\n                    </Button>\n                  )} />\n                </Grid>\n              </Grid>\n            </div>   \n\n          </Container>\n        </div>        \n\n    </div>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport NavBar from '../components/NavBar'\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Search from '@material-ui/icons/Search';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport TextField from '@material-ui/core/TextField';\nimport axios from 'axios'\nimport { Route } from 'react-router-dom'\nimport dotenv from 'dotenv'\ndotenv.config()\n\nconst useStyles = makeStyles((theme) => ({\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  heroButtons: {\n    marginTop: theme.spacing(4),\n  },\n  root: {\n    display: 'flex',\n    '& > * + *': {\n      marginLeft: theme.spacing(2),\n    }\n  }\n}));\n\n\nexport default function DataSearch() {\n  const classes = useStyles();\n  const [loading, setLoading] = React.useState(false);\n\n  const fetchDataAndRedirect = async (history, isManualSearch, zipCodeByLocation) => {\n    let zipcode;\n\n    if(isManualSearch){\n      zipcode = document.getElementById('outlined-number').value;\n      zipcode = parseInt(zipcode);\n    }else{\n      zipcode = zipCodeByLocation\n    }\n\n  \n    const response = await axios.get(`https://data.cityofchicago.org/resource/4ijn-s7e5.json?zip=${zipcode}`);\n  \n    history.push({\n      pathname: '/view-data',\n      state: { data: response.data }\n    })\n  }\n\n  const parseZipCode = (data) => {\n    let zipcode = -1;  \n\n    data.results.forEach( (locationInfo) => {      \n      locationInfo.address_components.forEach( (component) => {\n          if(component.types.includes('postal_code') ){\n            console.log(`zip code is ${component.short_name}`)\n            zipcode = component.short_name\n            return parseInt(zipcode);\n          }\n      }) \n    })\n\n    return parseInt(zipcode);\n  }\n\n  const showCurrentPosition = async (position, history) => {\n  \n    // eslint-disable-next-line no-undef\n    const response = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${position.coords.latitude},${position.coords.longitude}&key=${process.env.REACT_APP_GOOGLE_GEOCODING_API_KEY}`);\n    setLoading(false);\n    const zipCode = await parseZipCode(response.data)\n    fetchDataAndRedirect(history, false, zipCode)\n    console.log(`zip  ${typeof zipCode}`)\n  }\n\n  \n  const getLocation = async (history) => {\n    if(navigator.geolocation){\n      setLoading(true);\n      navigator.geolocation.getCurrentPosition( (position) => {\n        showCurrentPosition(position, history)\n      })\n    }else{\n      alert('No location data found. Please allow permission to view your current location')\n    }\n  }\n\n  return (\n    <div>\n        <NavBar/>\n        \n        <div className={classes.heroContent}>\n          <Container maxWidth=\"sm\">\n\n            <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\n              Search by zip code to view food inspection data\n            </Typography>\n\n\n            <div className={classes.heroButtons}>\n\n             <Grid container spacing={2} justify=\"center\">\n                <Grid item>\n              \n                <TextField\n                  id=\"outlined-number\"\n                  label=\"Enter Zipcode\"\n                  type=\"number\"\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  variant=\"outlined\"\n                  placeholder=\"i.e. 60607\"\n                />   \n\n                <br/><br/>\n\n                </Grid>\n              </Grid>\n\n\n              <Grid container spacing={2} justify=\"center\">\n                <Grid item>\n                  \n                  <Route render={({history}) => (                      \n                    <Button variant=\"contained\" color=\"primary\" endIcon={<Search />} onClick={ async () => fetchDataAndRedirect(history, true, null) } >\n                      Search\n                    </Button>\n                  )} />\n                </Grid>\n\n              </Grid>\n\n\n              <Grid container spacing={2} justify=\"center\">\n                <Grid item>\n                  <Route render={({history}) => (                      \n                      <Button variant=\"contained\" color=\"primary\" endIcon={<LocationOnIcon />} onClick={ () => getLocation(history) } >\n                        Search by current location\n                      </Button>\n                  )} />\n                </Grid>                    \n              </Grid>   \n\n              <Grid container spacing={2} justify=\"center\">\n                <Grid item>\n                    <div className={classes.root}>\n                      { loading && <CircularProgress /> }\n                    </div> \n                </Grid>                  \n              </Grid>                 \n              \n                        \n\n\n            </div>     \n\n          </Container>\n        </div>        \n\n    </div>\n  );\n}\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { Route } from 'react-router-dom'\n\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nfunction handleViewMap(locationDetails, history){                    \n    console.log(JSON.stringify(locationDetails))\n    history.push({\n      pathname: '/map-view',\n      state: { data: locationDetails }\n    })\n}\n\nexport default function SimpleCard(props) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n          {props.risk}\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          Business Name: {props.businessName}\n        </Typography>\n        <Typography className={classes.pos} color=\"textSecondary\">\n          Test Results: {props.results}\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          Full Address: {props.address} {props.city} {props.state} {props.zip}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Route render={({history}) => (   \n          <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={ () => { handleViewMap(props.location, history) }} >View in map</Button>\n        )} />\n      </CardActions>\n    </Card>\n  );\n}","/* eslint-disable react/jsx-key */\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport NavBar from '../components/NavBar'\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Alert from '@material-ui/lab/Alert';\nimport SimpleCard from '../components/SimpleCard'\n\nconst useStyles = makeStyles((theme) => ({\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  heroButtons: {\n    marginTop: theme.spacing(4),\n  },\n  root: {\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(2),\n    },\n  },  \n}));\n\nfunction displayCards(data){\n  return (\n      data.map( (inspection) => (\n            <div>\n                <SimpleCard businessName={inspection.aka_name} risk={inspection.risk} \n                results={inspection.results} address={inspection.address} city={inspection.city} \n                state={inspection.state} zip={inspection.zip} location={inspection.location} />\n                <br/>\n            </div>                                        \n        ))                 \n  );\n}\n\nfunction isDataPresent(data){\n  if(data != undefined){\n    return true\n  }\n  return false\n}\n\nfunction displayError(){\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <Alert variant=\"filled\" severity=\"error\">\n        No data available to view. Please go back to search page to find data\n      </Alert>\n    </div>\n  );\n}\n\n// ! FIXME: add explicit prop validation\nexport default function DataListView(props) {\n  const classes = useStyles();\n\n  return (\n    <div>\n        <NavBar/>\n        \n        <div className={classes.heroContent}>\n          <Container maxWidth=\"sm\">\n\n            <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\n              View Data\n            </Typography>    \n\n            { isDataPresent(props.location.state) ? displayCards(props.location.state.data) : displayError()  }\n                    \n          </Container>\n        </div>        \n\n    </div>\n  );\n}","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport NavBar from '../components/NavBar'\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\nimport dotenv from 'dotenv'\ndotenv.config()\n\n\nconst mapStyles = {\n  width: '100%',\n  height: '100%'\n};\n\n\nexport function MapViewComponent(props) {\n  // const classes = useStyles();\n  console.log(props)\n  return (\n    <div>\n        <NavBar/>\n\n        <Map\n            google={props.google}\n            zoom={14}\n            style={mapStyles}\n            initialCenter={\n              {\n                lat: props.location.state.data.longitude,\n                lng: props.location.state.data.latitude\n              }\n            }> \n\n            <Marker position = {{ lat: props.location.state.data.longitude, lng: props.location.state.data.latitude }} />            \n          </Map>\n\n    </div>\n  );\n}\n\nexport default GoogleApiWrapper({\n  // eslint-disable-next-line no-undef\n  apiKey: process.env.REACT_APP_GOOGLE_CLOUD_API_KEY\n})(MapViewComponent);\n\n","import React from 'react';\nimport { Route, HashRouter, Switch } from 'react-router-dom'\nimport Home from './Home'\nimport DataSearch from './DataSearch'\nimport DataListView from './DataListView'\nimport MapViewComponent from './MapView'\n\nexport default function App() {\n  return (\n    <HashRouter>\n      <Switch>\n          <Route exact path='/' component={Home} />\n          <Route path='/search' component={DataSearch} />\n          <Route path='/view-data' component={DataListView} />\n          <Route path='/map-view' component={MapViewComponent} />\n      </Switch>\n    </HashRouter>\n  );\n}\n","import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n});\n\nexport default theme;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://cra.link/PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://cra.link/PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch((error) => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then((response) => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log('No internet connection found. App is running in offline mode.');\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then((registration) => {\n          registration.unregister();\n        })\n        .catch((error) => {\n          console.error(error.message);\n        });\n    }\n  }\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport App from './pages/App';\nimport theme from './theme';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\nimport dotenv from 'dotenv'\ndotenv.config()\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.querySelector('#root'),\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n\n"],"sourceRoot":""}